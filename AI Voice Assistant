# voice_assistant.py

import pywhatkit
import speech_recognition as sr
import webbrowser
import pyttsx3
from newsdataapi import NewsDataApiClient
import random
import re
import urllib.parse

# ========== CONFIGURATIONS ==========
ACTIVATION_NAME = "assistant"  # Users can change this to any name they want
NEWS_API_KEY = 'your_api_key_here'  # Replace with your own NewsData API key

# ========== INITIALIZATION ==========
engine = pyttsx3.init()
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[1].id)  # You can change voice index if needed
engine.setProperty('rate', 175)

recognizer = sr.Recognizer()
newsapi = NewsDataApiClient(apikey=NEWS_API_KEY)

# ========== CORE FUNCTIONS ==========

def speak(text):
    """Speak the provided text using the TTS engine."""
    engine.say(text)
    engine.runAndWait()

def greet_user():
    """Speak a random greeting when assistant is activated."""
    greetings = [
        "Hello! How can I help you today?",
        "Yes, I'm listening. What would you like to do?",
        "I'm ready when you are.",
        "Go ahead, I'm listening."
    ]
    speak(random.choice(greetings))

def process_command(command):
    """Analyze and respond to user voice command."""
    c = command.lower()

    # YouTube Search
    if match := re.search(r"search (.+?) on youtube", c):
        query = match.group(1).strip()
        url = f"https://www.youtube.com/results?search_query={urllib.parse.quote_plus(query)}"
        speak(f"Searching for {query} on YouTube.")
        webbrowser.open(url)

    # Google Search
    elif match := re.search(r"search (.+?) on google", c):
        query = match.group(1).strip()
        url = f"https://www.google.com/search?q={urllib.parse.quote_plus(query)}"
        speak(f"Searching for {query} on Google.")
        webbrowser.open(url)

    # Play on YouTube
    elif match := re.search(r"play (.+?) (on )?youtube", c):
        video_query = match.group(1).strip()
        speak(f"Playing {video_query} on YouTube.")
        pywhatkit.playonyt(video_query)

    # Open Websites
    elif "open google" in c:
        webbrowser.open("https://google.com")
    elif "open facebook" in c:
        webbrowser.open("https://facebook.com")
    elif "open youtube" in c:
        webbrowser.open("https://youtube.com")
    elif "open linkedin" in c:
        webbrowser.open("https://linkedin.com")

    # News Headlines
    elif "news" in c:
        response = newsapi.latest_api(q='latest', country='pk', language='en')
        articles = response.get('results', [])
        if not articles:
            speak("Sorry, I couldn't find any news right now.")
        else:
            speak("Here are the top headlines.")
            for article in articles[:5]:
                title = article.get('title', '')
                if title:
                    print("News:", title)
                    speak(title)

    # Exit
    elif "exit" in c or "quit" in c or "stop" in c:
        speak("Goodbye. Assistant shutting down.")
        exit()

# ========== MAIN LOOP ==========

if __name__ == "__main__":
    speak("Initializing your voice assistant.")
    while True:
        try:
            with sr.Microphone() as source:
                print("Listening for activation word...")
                audio = recognizer.listen(source, timeout=2, phrase_time_limit=5)
            word = recognizer.recognize_google(audio)

            if ACTIVATION_NAME in word.lower():
                greet_user()
                with sr.Microphone() as source:
                    print("Command mode activated...")
                    audio = recognizer.listen(source, timeout=2, phrase_time_limit=5)
                    command = recognizer.recognize_google(audio)
                    process_command(command)

        except sr.UnknownValueError:
            speak("Sorry, I didn't catch that.")
        except sr.RequestError:
            speak("Could not request results; check your internet connection.")
        except Exception as e:
            print(f"Error: {e}")
